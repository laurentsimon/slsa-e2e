name: Deploy policy validation

permissions:
  contents: read

defaults:
  run:
    shell: bash

on:
  workflow_call:
    # TODO: only pass the container image?
    # TODO: repository input.
    secrets:
      registry-username:
        description: "Username to log into the container registry."
      registry-password:
        description: "Password to log in the container registry."

    inputs:
      image:
        description: "The OCI image name. This must not include a tag or digest."
        required: true
        type: string
      digest:
        description: "The OCI image digest. The image digest of the form '<algorithm>:<digest>' (e.g. 'sha256:abcdef...')"
        required: true
        type: string
      policy-path:
        description: "The path to the policy, relative to GITHUB_WORKSPACE"
        required: true
        type: string
      registry-username:
        description: "Username to log into the container registry."
        type: string
      metadata-namespace:
        description: "The namespace we want to deploy to"
        required: false
        type: string
      metadata-labels:
        description: "The labels the k8 resource should match against."
        required: false
        type: string

    outputs:
      outcome:
        description: "The outcome status of the run ('success' or 'failure')."
        value: ${{ jobs.final.outputs.outcome }}

jobs:
  # detect-env detects the reusable workflow's repository and ref for use later
  # in the workflow.
  detect-env:
    outputs:
      outcome: ${{ steps.final.outputs.outcome }}
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the generator ref
        id: detect
        continue-on-error: true
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow-js@v1.9.0

      - name: Final outcome
        id: final
        env:
          SUCCESS: ${{ steps.detect.outcome != 'failure' }}
        run: |
          set -euo pipefail
          echo "outcome=$([ "$SUCCESS" == "true" ] && echo "success" || echo "failure")" >> "$GITHUB_OUTPUT"

  # verify provenance.
  # TODO: make an Action for this.
  verify:
    needs: [detect-env]
    outputs:
      outcome: ${{ steps.final.outputs.outcome }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
      contents: read
    steps:
      - name: Checkout this repository
        id: this_checkout
        continue-on-error: true
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          token: "${{ github.token }}"
          persist-credentials: false
          fetch-depth: 1
          path: __THIS_REPO__
      - name: Checkout the caller's repository
        id: caller_checkout
        continue-on-error: true
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          # TODO: Support arbitrary repository?
          token: "${{ github.token }}"
          persist-credentials: false
          fetch-depth: 1
          path: __CALLER_REPO__
      - name: Installer slsa-verifier
        id: verifier_install
        continue-on-error: true
        uses: slsa-framework/slsa-verifier/actions/installer@73d1bcba982de0f644baec83df839399d13f472e # v2.4.0
      # TODO: need an Action to install the engine.
      - name: Compile the policy engine
        id: engine_compile
        continue-on-error: true
        working-directory: __THIS_REPO__
        run: |
          set -euo pipefail
          go mod vendor
          go build -mod=vendor -trimpath -tags=netgo -o policy-verifier
          chmod u+x policy-verifier
      - name: Install cosign
        id: cosign-install
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
        with:
          cosign-release: v2.0.0
        continue-on-error: true
      - name: Login
        id: login
        continue-on-error: true
        env:
          UNTRUSTED_IMAGE: "${{ inputs.image }}"
          UNTRUSTED_INPUT_USERNAME: "${{ inputs.registry-username }}"
          UNTRUSTED_SECRET_USERNAME: "${{ secrets.registry-username }}"
          UNTRUSTED_PASSWORD: "${{ secrets.registry-password }}"
          GCP_ACCESS_TOKEN: 
        run: |
          set -euo pipefail

          # NOTE: Some docker images are of the form <org>/<name>
          # Here we get the first part and check if it has a '.' or ':'
          # character in it to see if it's a domain name.
          # See: https://stackoverflow.com/questions/37861791/how-are-docker-image-names-parsed#37867949
          untrusted_registry="docker.io"
          # NOTE: Do not fail the script if grep does not match.
          maybe_domain=$(echo "${UNTRUSTED_IMAGE}" | cut -f1 -d "/" | { grep -E "\.|:" || true; })
          if [ "${maybe_domain}" != "" ]; then
            untrusted_registry="${maybe_domain}"
          fi

          if [ "${GCP_ACCESS_TOKEN}" != "" ]; then
            username="oauth2accesstoken"
            password="${GCP_ACCESS_TOKEN}"
          else
            username="${UNTRUSTED_SECRET_USERNAME:-${UNTRUSTED_INPUT_USERNAME}}"
            if [ "${username}" == "" ]; then
                echo "registry-username is required." >&2
                exit 1
            fi
            password="${UNTRUSTED_PASSWORD}"
            if [ "${password}" == "" ]; then
                echo "registry-password is required." >&2
                exit 1
            fi
          fi

          echo "login to ${untrusted_registry}"
          cosign login "${untrusted_registry}" -u "${username}" -p "${password}"

      # NOTE: We assume the repository built from is the caller's repository for simplicity.
      # This way we need not inspect every build provenance attestation.
      - name: Verify provenance
        id: provenance
        continue-on-error: true
        working-directory: __THIS_REPO__
        env:
          IMMUTABLE_IMAGE: "${{ inputs.image }}@${{ inputs.digest }}"
        run: ./.github/workflows/scripts/verify-provenance.sh
      - name: Policy verification
        id: policy
        continue-on-error: true
        working-directory: __THIS_REPO__
        env:
          UNTRUSTED_USER_POLICY: "../__CALLER_REPO__/${{ inputs.policy-path }}"
          UNTRUSTED_REPOSITORY: "${{ steps.provenance.outputs.builder_id }}"
          UNTRUSTED_MUTABLE_IMAGE: "${{ inputs.image }}"
          UNTRUSTED_BUILDER_ID: "${{ steps.provenance.outputs.builder_id }}"
        run: ./.github/workflows/scripts/verify-policy.sh
      - name: Create attestation
        id: attestation
        continue-on-error: true
        working-directory: __THIS_REPO__
        env:
          # TODO:need evaluation output to determine the logging part.
          UNTRUSTED_USER_POLICY: "git+https://github.com/${GITHUB_REPOSITORY}/.github/workflows/verify.yml"
          UNTRUSTED_IMAGE: "${{ inputs.image }}"
          UNTRUSTED_DIGEST: "${{ inputs.digest }}"
          TRUSTED_VERIFIER: "git+https://github.com/${{ needs.detect-env.outputs.repository }}/.github/workflows/deploy_policy.yml@${{ needs.detect-env.outputs.ref }}"
          UNTRUSTED_NAMESPACE: "${{ inputs.metadata-namespace }}"
          UNTRUSTED_LABELS: "${{ inputs.metadata-labels }}"
          SUCCESS: ${{ steps.provenance == 'success' && steps.policy.outcome == 'success' }}
        run: ./.github/workflows/scripts/create-attestation.sh
      - name: Final outcome
        id: final
        env:
          SUCCESS: ${{ steps.attestation.outcome != 'failure' && steps.policy.outcome != 'failure' && steps.provenance.outcome != 'failure' && steps.cosign-install.outcome != 'failure' && steps.login.outcome != 'failure' && steps.engine_compile.outcome != 'failure' && steps.verifier_install.outcome != 'failure' && steps.caller_checkout.outcome != 'failure' && steps.this_checkout.outcome != 'failure' }}
        run: |
          set -euo pipefail
          echo "outcome=$([ "$SUCCESS" == "true" ] && echo "success" || echo "failure")" >> "$GITHUB_OUTPUT"

  # final fails or succeeds based on the value of `inputs.continue-on-error`
  # and the outcome of previous jobs.
  final:
    outputs:
      outcome: ${{ steps.final.outputs.outcome }}
    runs-on: ubuntu-latest
    needs: [detect-env, verify]
    # Note: always run even if needed jobs are skipped.
    if: always()
    steps:
      - name: Final outcome
        id: final
        env:
          SUCCESS: ${{ needs.detect-env.outputs.outcome != 'failure' && needs.verify.outputs.outcome != 'failure' }}
        run: |
          set -euo pipefail
          echo "outcome=$([ "$SUCCESS" == "true" ] && echo "success" || echo "failure")" >> "$GITHUB_OUTPUT"
